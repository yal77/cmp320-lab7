/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jdbcgui;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author abdosalam
 */
public class UpdateDeleteDep extends javax.swing.JFrame {
      myDBCon con = new myDBCon();
    Statement statement;
    PreparedStatement prepStatement;
    ResultSet rs;
    ResultSet rsdeptno;

    /**
     * Creates new form UpdateDeleteDep
     */
    public UpdateDeleteDep() {
        initComponents();
        //hiding error labels at the beginning
        lblDeptnoError.setVisible(false);
        lblDnameError.setVisible(false);
        
        this.setLocationRelativeTo(null);
        
        getNewData();
    }
private void getNewData() {
        try{
            rsdeptno = con.executeStatement("SELECT deptno, dname, loc FROM dept ORDER BY deptno ASC ");
            rsdeptno.beforeFirst();
            rsdeptno.first();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - GetNewData() in UpdateDeleteDep.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //populate fields
        populateFields();
    }
private void populateFields() {
        System.out.println("PopulateFields");
        try {
            //populate fiels from ResultSet data
            txtDname.setText(rsdeptno.getString("dname"));
            lblLoc.setText(rsdeptno.getString("loc"));
            txtDeptno.setText(rsdeptno.getString("deptno"));
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteDep.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  private void EnableDisableButtons() {
        try {
            //if first row is displayed, disable the previous button. else, enable it
            if (rsdeptno.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            //if last row is displayed, disable the next button. else, enable it
            if (rsdeptno.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteDep.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
  
  private void MoveNext() {
        try {
            //if not the last row of the result set, move to next row
            if (!rsdeptno.isLast()) {

                rsdeptno.next();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteDep.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  private void MovePrevious() {
        try {
            //if not the first row of the result set, move to previous row
            if (!rsdeptno.isFirst()) {
                rsdeptno.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteDep.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    DeptNOJLabel = new javax.swing.JLabel();
    DnameJLabel = new javax.swing.JLabel();
    btnUpdate = new javax.swing.JButton();
    btnDelete = new javax.swing.JButton();
    btnNext = new javax.swing.JButton();
    btnPrevious = new javax.swing.JButton();
    txtDeptno = new javax.swing.JTextField();
    txtDname = new javax.swing.JTextField();
    lblDeptnoError = new javax.swing.JLabel();
    lblDnameError = new javax.swing.JLabel();
    LocationJLabel = new javax.swing.JLabel();
    lblLoc = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setResizable(false);

    jLabel1.setText("Update/Delete Department");

    DeptNOJLabel.setText("DEPTNO:");

    DnameJLabel.setText("DNAME:");

    btnUpdate.setText("Update");
    btnUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnUpdateActionPerformed(evt);
      }
    });

    btnDelete.setText("Delete");
    btnDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDeleteActionPerformed(evt);
      }
    });

    btnNext.setText("Next>>");
    btnNext.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnNextActionPerformed(evt);
      }
    });

    btnPrevious.setText("<<Previous");
    btnPrevious.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPreviousActionPerformed(evt);
      }
    });

    txtDeptno.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtDeptnoActionPerformed(evt);
      }
    });

    lblDeptnoError.setText("error label");

    lblDnameError.setText("error label");

    LocationJLabel.setText("Location:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(27, 27, 27)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(DeptNOJLabel)
              .addComponent(DnameJLabel)
              .addGroup(layout.createSequentialGroup()
                .addComponent(LocationJLabel)
                .addGap(93, 93, 93)
                .addComponent(lblLoc))))
          .addGroup(layout.createSequentialGroup()
            .addGap(104, 104, 104)
            .addComponent(jLabel1)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(0, 35, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(btnPrevious)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnUpdate)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnDelete)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnNext)
            .addGap(33, 33, 33))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(txtDname, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(txtDeptno, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(lblDeptnoError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(lblDnameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(39, 39, 39))))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(DeptNOJLabel)
          .addComponent(txtDeptno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblDeptnoError))
        .addGap(27, 27, 27)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(DnameJLabel)
          .addComponent(txtDname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblDnameError))
        .addGap(29, 29, 29)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(LocationJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lblLoc))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnUpdate)
          .addComponent(btnDelete)
          .addComponent(btnNext)
          .addComponent(btnPrevious))
        .addContainerGap(50, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void txtDeptnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeptnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeptnoActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //confirm user wants to update employee
        String conf = JOptionPane.showInputDialog("Are you sure you want to update?\nYES to update\nAnything else to cancel");
        System.out.println(conf);
        if(conf.equalsIgnoreCase("YES") != true){
            //if user doesn't enter "YES", do nothing
            return;
        }
        try {
            
            if (isValidData()) {
                //to get the department information of the department with that
                //location in case the user changed the department number
                ResultSet check = con.executeStatement("select deptno from dept where loc like '" +  lblLoc.getText().trim() + "'");
                
                int oldDept = -1;
                
                while(check.next()){
                    oldDept = check.getInt("deptno");
                }
                
                //create sql command to update department information where the department location is the same as the one disaplyed
                String sqlCmd = "UPDATE dept SET deptno = "
                        + Integer.parseInt(txtDeptno.getText().trim()) + ", dname = '"
                        + txtDname.getText().trim() + "' WHERE loc = '"
                        + lblLoc.getText().trim() + "'";
                
                int result = con.executePrepared(sqlCmd);
                if (result > 0) {
                    try{
                        sqlCmd = "UPDATE emp set deptno = "
                                + Integer.parseInt(txtDeptno.getText().trim()) + " where deptno = "
                                + oldDept;
                        int result2 = con.executePrepared(sqlCmd);
                    
                        System.out.println(result2);
                    
                        }
                        catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, "Error updating department." + e.getMessage());
                        }
                    
                    
                    
                    
                        javax.swing.JLabel label = new javax.swing.JLabel("Department was updated successfully.");
                        label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                        getNewData();
                    

                } else {
                    // check validation errors 
                }

            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating department." + e.getMessage());

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
    
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        MovePrevious();
// TODO add your handling code here:
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //confirm user wants to update employee
        String conf = JOptionPane.showInputDialog("Are you sure you want to delete?\nYES to delete\nAnything else to cancel");
        System.out.println(conf);
        if(conf.equalsIgnoreCase("YES") != true){
            //if user doesn't enter "YES", do nothing
            return;
        }
        
        try {
            //check if their are employees in the department
            ResultSet check = con.executeStatement("select empno from emp e, dept d where e.deptno = d.deptno and d.loc like '" +  lblLoc.getText().trim() + "'");
            //if there are employees in that department, inform the user and do nothing
            if(check.next()){
                javax.swing.JLabel label = new javax.swing.JLabel("Can't delete a department with employees in it!");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            try {
            //create sql command to delete department where the location is the same as the location in the table
            String sqlCmd = "delete from dept where loc like '" +  lblLoc.getText().trim() + "'";
            int result = con.executePrepared(sqlCmd);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Department deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }

            }
            catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting department2131321321312.");

        }
            
            
            

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting department.");

        }
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed
void clearErrorLabels() {
        //clear all text from error labels and hide them
        lblDnameError.setText("");
        lblDnameError.setVisible(false);
        lblDeptnoError.setText("");
        lblDeptnoError.setVisible(false);

    }
public boolean isInteger(String s) {
        //checks if string is an integer
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        //checks if string is a double
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
boolean isValidData() {
        //check if data is valid
        boolean result = true;
        clearErrorLabels();
        //if dname does not meet specifications, change the error label message and make it visible
        if (txtDname.getText().trim().isEmpty() || (txtDname.getText().trim().length() > 14)) {
            if (txtDname.getText().trim().isEmpty()) {
                lblDnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtDname.getText().trim().length() > 14)) {
                lblDnameError.setText("Invalid. Must be < 15 chars.");
            }

            lblDnameError.setVisible(true);
            result = false;
        }
        //if deptno does not meet specifications, change the error label message and make it visible       
        if (!isInteger(txtDeptno.getText().trim()) || txtDeptno.getText().trim().isEmpty()) {
        if (txtDeptno.getText().trim().isEmpty()) {
                lblDeptnoError.setText("Invalid. Cannot be empty.");
            } else if (!(isInteger(txtDeptno.getText().trim()))) {
                lblDeptnoError.setText("Invalid. Must be number.");
            }

            lblDeptnoError.setVisible(true);
            result = false;
        }
        //if any of the fields do not match specifications, return false. else, return true
        return result;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDeleteDep().setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel DeptNOJLabel;
  private javax.swing.JLabel DnameJLabel;
  private javax.swing.JLabel LocationJLabel;
  private javax.swing.JButton btnDelete;
  private javax.swing.JButton btnNext;
  private javax.swing.JButton btnPrevious;
  private javax.swing.JButton btnUpdate;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel lblDeptnoError;
  private javax.swing.JLabel lblDnameError;
  private javax.swing.JLabel lblLoc;
  private javax.swing.JTextField txtDeptno;
  private javax.swing.JTextField txtDname;
  // End of variables declaration//GEN-END:variables
}
